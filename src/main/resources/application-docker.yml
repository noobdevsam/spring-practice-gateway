spring:
  application:
    name: spring-practice-gateway

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://spring-practice-auth-server:9000

  cloud:
    gateway:
      routes:
        - id: spring-practice-rest-mvc
          uri: http://spring-practice-restmvc:8080
          predicates:
            - Path= /api/v1/**
        - id: spring-practice-reactive
          uri: http://spring-practice-reactive:8080
          predicates:
            - Path= /api/v2/**
        - id: spring-practice-reactive-mongo
          uri: http://spring-practice-reactive-mongo:8080
          predicates:
            - Path= /api/v3/**
        - id: spring-practice-auth-server
          uri: http://spring-practice-auth-server:9000
          predicates:
            - Path= /oauth2/**
          filters:
            - name: SetRequestHostHeader
              args:
                host: spring-practice-auth-server


# docker container creation command
# docker run -d --name spring-practice-gateway -p 8080:8080 spring-practice-gateway:0.0.1-SNAPSHOT --spring.profiles.active=docker

# docker container with linked containers
# docker run -d --name spring-practice-gateway --link spring-practice-auth-server:spring-practice-auth-server -p 8080:8080 spring-practice-gateway:0.0.1-SNAPSHOT --spring.profiles.active=docker
# here, auth server is linked to the gateway container and the gateway container can access the auth-server using the port 8080 to get a JWT token

# link with auth-server and rest-mvc
#  docker run -d --name spring-practice-gateway --link spring-practice-auth-server:spring-practice-auth-server --link spring-practice-restmvc:spring-practice-restmvc -p 8080:8080 spring-practice-gateway:0.0.1-SNAPSHOT --spring.profiles.active=docker